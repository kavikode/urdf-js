{"version":3,"file":"URDFLoader.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nfunction URDFColliderClone(...args) {\n\n    const proto = Object.getPrototypeOf(this);\n    const result = proto.clone.call(this, ...args);\n    result.isURDFCollider = true;\n    return result;\n\n};\n\nfunction makeURDFCollider(object) {\n\n    object.isURDFCollider = true;\n    object.clone = URDFColliderClone;\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        values = values.map(v => parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n    setAngle(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setAngle(...angle);\n\n        }\n\n        return null;\n    }\n\n    setAngles(angles) {\n\n        // TODO: How to handle other, multi-dimensional joint types?\n        for (const name in angles) this.setAngle(name, angles[name]);\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, makeURDFCollider };\n","import * as THREE from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, makeURDFCollider } from './URDFClasses.js';\nimport { MeshBVH, acceleratedRaycast } from 'three-mesh-bvh';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\nclass URDFLoader {\n\n    constructor(manager) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n\n    }\n\n    /* Public API */\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError, options) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        const errors = {};\n\n        let managerOnErrorDefault = function() {};\n        let managerOnProgressDefault = function() {};\n        let managerOnLoadDefault = function() {};\n        let model;\n\n        if (manager.onError) {\n\n            managerOnErrorDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onProgress) {\n\n            managerOnProgressDefault = manager.onProgress.bind(manager);\n\n        }\n\n        if (manager.onLoad) {\n\n            managerOnLoadDefault = manager.onLoad.bind(manager);\n\n        }\n\n        manager.onError = function(url) {\n\n            errors[url] = 'Error in loading resource';\n\n            if (onError) {\n\n                onError(url);\n\n            }\n\n            managerOnErrorDefault(url);\n\n        };\n\n        manager.onProgress = function(url, itemsLoaded, itemsTotal) {\n\n            if (onProgress) {\n\n                onProgress(url, itemsLoaded, itemsTotal);\n\n            }\n\n            managerOnProgressDefault(url, itemsLoaded, itemsTotal);\n\n        };\n\n        manager.onLoad = function() {\n\n            if (onComplete) {\n\n                const partialErrors = Object.keys(errors).length === 0\n                    ? undefined\n                    : errors;\n\n                onComplete(model, partialErrors);\n\n            }\n\n            managerOnLoadDefault();\n\n        };\n\n        options = Object.assign({\n            workingPath,\n        }, options);\n\n        manager.itemStart(urdfPath);\n        fetch(urdfPath, options.fetchOptions)\n            .then(res => res.text())\n            .then(data => {\n\n                model = this.parse(data, options);\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                console.error('URDFLoader: Error parsing file.', e);\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content, options = {}) {\n\n        const packages = options.packages || '';\n        const loadMeshCb = options.loadMeshCb || this.defaultMeshLoader.bind(this);\n        const workingPath = options.workingPath || '';\n        const parseVisual = ('parseVisual' in options) ? options.parseVisual : true;\n        const parseCollision = options.parseCollision || false;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${ targetPkg } not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        function processUrdf(data) {\n\n            const parser = new DOMParser();\n            const urdf = parser.parseFromString(data, 'text/xml');\n            const children = [ ...urdf.children ];\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot(robotNode);\n\n        }\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [ ...robot.children ];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial(m);\n\n            });\n\n            // Create the <link> map\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${ name }\"]`) === null;\n                linkMap[name] = processLink(l, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint(j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [ ...joint.children ];\n            const jointType = joint.getAttribute('type');\n            const obj = new URDFJoint();\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [ ...link.children ];\n            target.name = link.getAttribute('name');\n            target.urdfNode = link;\n\n            if (parseVisual) {\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => processLinkElement(vn, target, materialMap));\n            }\n            if (parseCollision) {\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(vn => processLinkElement(vn, target));\n            }\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [ ...node.children ];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n\n                } else if (type === 'texture') {\n\n                    const loader = new THREE.TextureLoader(manager);\n                    const filename = n.getAttribute('filename');\n                    const filePath = resolvePath(filename);\n                    material.map = loader.load(filePath);\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, linkObj, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n            let scale = [1, 1, 1];\n\n            const children = [ ...vn.children ];\n            let material = null;\n            let primitiveModel = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial(materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) scale = processTuple(scaleAttr);\n\n                            loadMeshCb(filePath, manager, (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n                                        obj.raycast = acceleratedRaycast;\n                                        obj.geometry.boundsTree = new MeshBVH(obj.geometry);\n\n                                    }\n\n                                    linkObj.add(obj);\n\n                                    obj.position.set(xyz[0], xyz[1], xyz[2]);\n                                    obj.rotation.set(0, 0, 0);\n\n                                    // multiply the existing scale by the scale components because\n                                    // the loaded model could have important scale values already applied\n                                    // to the root. Collada files, for example, can load in with a scale\n                                    // to convert the model units to meters.\n                                    obj.scale.x *= scale[0];\n                                    obj.scale.y *= scale[1];\n                                    obj.scale.z *= scale[2];\n\n                                    applyRotation(obj, rpy);\n\n                                    if (isCollisionNode) {\n\n                                        makeURDFCollider(obj);\n\n                                    }\n\n                                }\n\n                            });\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        primitiveModel.raycast = acceleratedRaycast;\n                        primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n\n                        linkObj.add(primitiveModel);\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'sphere') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        primitiveModel.raycast = acceleratedRaycast;\n                        primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    } else if (geoType === 'cylinder') {\n\n                        primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        primitiveModel.raycast = acceleratedRaycast;\n                        primitiveModel.geometry.boundsTree = new MeshBVH(primitiveModel.geometry);\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        linkObj.add(primitiveModel);\n\n                        if (isCollisionNode) {\n\n                            makeURDFCollider(primitiveModel);\n\n                        }\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                }\n\n            });\n\n            // apply the position and rotation to the primitive geometry after\n            // the fact because it's guaranteed to have been scraped from the child\n            // nodes by this point\n            if (primitiveModel) {\n\n                applyRotation(primitiveModel, rpy, true);\n                primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n\n            }\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl(?:\\?|$)/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae(?:\\?|$)/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\n\n        }\n\n    }\n\n};\n"],"names":["URDFColliderClone","proto","Object","getPrototypeOf","args","result","clone","call","isURDFCollider","makeURDFCollider","object","URDFLink","isURDFLink","type","urdfNode","source","recursive","Object3D","URDFJoint","_jointType","v","jointType","jointValue","Array","fill","isURDFJoint","axis","limit","lower","upper","ignoreLimits","origPosition","origQuaternion","isArray","setOffset","values","map","parseFloat","position","quaternion","angle","Math","min","max","delta","Quaternion","setFromAxisAngle","multiplyQuaternions","matrixWorldNeedsUpdate","copy","addScaledVector","worldMatrixNeedsUpdate","console","warn","URDFRobot","isURDFRobot","urdfRobotNode","robotName","links","joints","traverse","c","name","jointName","joint","setAngle","angles","tempQuaternion","THREE","tempEuler","processTuple","val","trim","split","num","applyRotation","obj","rpy","additive","rotation","set","setFromEuler","multiply","URDFLoader","manager","urdf","onComplete","onProgress","onError","options","workingPath","extractUrlBase","urdfPath","resolveURL","errors","managerOnErrorDefault","managerOnProgressDefault","managerOnLoadDefault","model","bind","onLoad","url","itemsLoaded","itemsTotal","partialErrors","keys","length","undefined","assign","itemStart","fetch","fetchOptions","then","res","text","data","parse","itemEnd","e","error","itemError","content","packages","loadMeshCb","defaultMeshLoader","parseVisual","parseCollision","linkMap","jointMap","materialMap","resolvePath","path","test","replace","targetPkg","relPath","endsWith","processUrdf","parser","DOMParser","parseFromString","children","robotNode","filter","nodeName","pop","processRobot","robot","robotNodes","toLowerCase","materials","getAttribute","forEach","m","processMaterial","l","isRoot","querySelector","processLink","j","processJoint","parent","child","xyz","n","add","axisNode","axisXYZ","normalize","link","target","visualNodes","vn","processLinkElement","collisionNodes","node","matNodes","material","rgba","color","setRGB","opacity","transparent","loader","filename","filePath","load","linkObj","isCollisionNode","scale","primitiveModel","materialNode","geoType","scaleAttr","err","raycast","acceleratedRaycast","geometry","boundsTree","MeshBVH","x","y","z","size","radius","PI","done","STLLoader","geom","mesh","ColladaLoader","dae","scene"],"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"}